[project]
name = "pyplanc"
version = "0.0.2"
description = "Python bindings for the libplanc C++ library."
requires-python = ">=3.11"
readme = "python/README.md"
license.file = "license.md"
authors = [
    { name = "Andrew Robbins", email = "andrew@robbinsa.me"},
    { name = "Yichen Wang", email = "wayichen@umich.edu"},
    { name = "Joshua Welch", email = "welchjd@umich.edu"},
    { name = "Ramakrishnan Kannan", email = "kannanr@ornl.gov"}
]
maintainers = [
    { name = "Andrew Robbins", email = "andrew@robbinsa.me"}
]

dependencies = [
    "numpy>=2.0, <3.0",
    "threadpoolctl>=3.4.0, <4.0",
    "scipy>=1.12.0",
    "progressbar2>=4.5.0",
]

classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: 3.14",
  "Programming Language :: C++",
  "Topic :: Scientific/Engineering :: Bio-Informatics",
  "Topic :: Scientific/Engineering :: Mathematics",
  "Operating System :: POSIX :: Linux",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: MacOS :: MacOS X",
  "Intended Audience :: Science/Research"
]

[project.urls]
Homepage = "https://welch-lab.github.io"
GitHub = "https://github.com/welch-lab/libplanc"

[dependency-groups]
dev = [
  "nanobind>=2.7.0",
  {include-group = "lint"},
  {include-group = "test"},
]
lint = [
  "ruff",
]
test = [
  "pytest >=6.0",
  "pyyaml >=6.0"
]
ci = [
  "cibuildwheel >=3"
]

[build-system]
requires = ["scikit-build-core>=0.11", "nanobind>=2.7", "numpy>=2.0, <3.0"]
build-backend = "scikit_build_core.build"

[tool.uv]
default-groups = ["dev"]

[tool.uv.dependency-groups]
ci =  {requires-python = ">=3.11"}
[[tool.uv.index]]
name = "personal"
url = "https://pypi.robbinsa.me/simple/"
explicit = true

[tool.scikit-build]
minimum-version = "build-system.requires"
build-dir = "build/{wheel_tag}"
wheel.py-api = "cp312"
sdist.exclude = [
    '\bench', '\.idea', '\.github', '\.vscode', '\utilities', '\formatter'
]
wheel.install-dir = "pyplanc"

[tool.scikit-build.cmake]
version = "CMakeLists.txt"
define.SKBUILD_FREETHREAD = "0"

[[tool.scikit-build.overrides]]
if.platform-system = "win32"
if.abi-flags = "t"
cmake.define.SKBUILD_FREETHREAD = "1"

#[tool.scikit-build.cmake.define]
#CMAKE_TOOLCHAIN_FILE = "C:/Program Files/Microsoft Visual Studio/2022/Community/VC/vcpkg/scripts/buildsystems/vcpkg.cmake"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q"
testpaths = [
    "python/tests",
]
[tool.cibuildwheel]
enable = ["cpython-freethreading", "pypy"]
build-frontend = "build[uv]"
build-verbosity = 1
skip = ["*-win32"]
test-command = "pytest -rq {project}/python/tests"
before-test = ["python -m ensurepip"  , "python -m pip install pytest"]
environment-pass = ["VCPKG_BINARY_SOURCES", "VCPKG_FEATURE_FLAGS", "VCPKG_HOST_PATH"]

[tool.cibuildwheel.macos]
before-all = ["pipx install uv",
              "brew install autoconf automake libtool",
              "git clone https://github.com/microsoft/vcpkg.git",
              "chmod +x ./vcpkg/bootstrap-vcpkg.sh && ./vcpkg/bootstrap-vcpkg.sh"]
repair-wheel-command = "DYLD_LIBRARY_PATH=/Users/runner/work/libplanc/libplanc/build/ delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -vv {wheel}"
before-test = ["python -m ensurepip", "python -m pip install pytest", "python -m pip install -U pip", "python -m pip install scipy -Csetup-args=-Dblas=accelerate -Csetup-args=-Dlapack=accelerate"]
[tool.cibuildwheel.macos.environment]
MACOSX_DEPLOYMENT_TARGET = "10.15"
SKBUILD_CMAKE_DEFINE="CMAKE_TOOLCHAIN_FILE=vcpkg/scripts/buildsystems/vcpkg.cmake"
FC="gfortran-13"
[[tool.cibuildwheel.overrides]]
select = "*-macosx_arm64"
inherit.environment = "append"
environment.MACOSX_DEPLOYMENT_TARGET="11"

[tool.cibuildwheel.linux]
before-all = ["yum install -y zip", "mkdir -p /host/tmp/vcpkg-binary"]
repair-wheel-command = "LD_LIBRARY_PATH=/project/build/ auditwheel repair -w {dest_dir} {wheel}"
#manylinux-x86_64-image = "manylinux_2_28"
#manylinux-pypy_x86_64-image = "manylinux_2_28"
#manylinux-aarch64-image = "manylinux_2_28"
#manylinux-pypy_aarch64-image = "manylinux_2_28"
environment.SKBUILD_CMAKE_DEFINE = "CMAKE_TOOLCHAIN_FILE=/host/usr/local/share/vcpkg/scripts/buildsystems/vcpkg.cmake"
environment.CC = "gcc"
environment.CXX = "g++"
environment.VCPKG_INSTALLATION_ROOT = "/host/usr/local/share/vcpkg/"
environment.VCPKG_BINARY_SOURCES = "clear;files,/host/$VCPKG_HOST_PATH,readwrite"
[[tool.cibuildwheel.overrides]]
select = "pp*-manylinux*"
inherit.environment = "append"
environment.SKBUILD_CMAKE_DEFINE = "CMAKE_TOOLCHAIN_FILE=/host/usr/local/share/vcpkg/scripts/buildsystems/vcpkg.cmake"
before-test = ["python -m ensurepip", "python -m pip install -U pip", "python -m pip install pytest scipy --extra-index-url https://pypi.robbinsa.me/simple/ --prefer-binary",]

[[tool.cibuildwheel.overrides]]
select = "*-musllinux_x86_64"
before-all = ["apk add bash build-base cmake libtool zip unzip curl git g++ make pkgconfig sudo",
    "wget https://dl-cdn.alpinelinux.org/alpine/edge/community/x86_64/ninja-build-1.13.1-r0.apk",
    "apk add ./ninja-build-1.13.1-r0.apk",
    "wget https://dl-cdn.alpinelinux.org/alpine/edge/community/x86_64/ninja-is-really-ninja-1.13.1-r0.apk",
    "apk add ./ninja-is-really-ninja-1.13.1-r0.apk",
    "git clone https://github.com/microsoft/vcpkg.git",
    "chmod +x ./vcpkg/bootstrap-vcpkg.sh && ./vcpkg/bootstrap-vcpkg.sh",
    "./vcpkg/vcpkg install"]
inherit.environment = "append"
environment.SKBUILD_CMAKE_DEFINE = "CMAKE_TOOLCHAIN_FILE=vcpkg/scripts/buildsystems/vcpkg.cmake"
environment.VCPKG_INSTALLATION_ROOT = "./vcpkg/"
environment.VCPKG_FORCE_SYSTEM_BINARIES = "1"

[[tool.cibuildwheel.overrides]]
select = "*-musllinux_aarch64"
before-all = ["apk add bash build-base cmake libtool zip unzip curl git g++ make pkgconfig sudo",
    "wget https://dl-cdn.alpinelinux.org/alpine/edge/community/aarch64/ninja-build-1.13.1-r0.apk",
    "apk add ./ninja-build-1.13.1-r0.apk",
    "wget https://dl-cdn.alpinelinux.org/alpine/edge/community/aarch64/ninja-is-really-ninja-1.13.1-r0.apk",
    "apk add ./ninja-is-really-ninja-1.13.1-r0.apk",
    "git clone https://github.com/microsoft/vcpkg.git",
    "chmod +x ./vcpkg/bootstrap-vcpkg.sh && ./vcpkg/bootstrap-vcpkg.sh",
    "./vcpkg/vcpkg install"]
inherit.environment = "append"
environment.SKBUILD_CMAKE_DEFINE = "CMAKE_TOOLCHAIN_FILE=vcpkg/scripts/buildsystems/vcpkg.cmake"
environment.VCPKG_INSTALLATION_ROOT = "./vcpkg/"
environment.VCPKG_FORCE_SYSTEM_BINARIES = "1"

#before-all = "apk add hwloc-dev armadillo-dev openblas-dev"

#[[tool.cibuildwheel.overrides]]
#select = "*-manylinux*"
#

[tool.cibuildwheel.windows]
before-all = ["pipx install uv"]
before-build = "pip install delvewheel"
repair-wheel-command = "delvewheel repair -w {dest_dir} {wheel} --add-path .\\build --namespace-pkg pyplanc"
[tool.cibuildwheel.windows.environment]
SKBUILD_CMAKE_DEFINE="CMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake"

[[tool.cibuildwheel.overrides]]
select = "pp*-win_*"
inherit.environment = "append"
environment.CXXFLAGS = "/DHAVE_SNPRINTF"
before-test = ["python -m ensurepip", "python -m pip install -U pip", "python -m pip install pytest scipy --extra-index-url https://pypi.robbinsa.me/simple/ --prefer-binary"]

[[tool.cibuildwheel.overrides]]
select = "*-win_arm64"
before-all = ["pipx install uv",
              "cd $VCPKG_INSTALLATION_ROOT && git fetch"]
